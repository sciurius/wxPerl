#############################################################################
## Name:        ext/xrc/XS/XmlNode.xsp
## Purpose:     XS for Wx::XmlNode
## Author:      Mattia Barbon
## Modified by:
## Created:     25/07/2003
## RCS-ID:      $Id$
## Copyright:   (c) 2003, 2007 Mattia Barbon
## Licence:     This program is free software; you can redistribute it and/or
##              modify it under the same terms as Perl itself
#############################################################################

%module{Wx};

%typemap{wxXmlProperty*}{simple};
%typemap{wxXmlAttribute*}{simple};
%typemap{wxXmlNode*}{simple};
%typemap{wxXmlNodeType}{simple};

%name{Wx::XmlAttribute} class wxXmlAttribute
{
    wxXmlAttribute(const wxString& name = wxEmptyString,
                   const wxString& value = wxEmptyString,
                   wxXmlAttribute* next = NULL);

    wxString GetName() const;
    wxString GetValue() const;
    wxXmlAttribute* GetNext() const;

    void SetName(const wxString& name);
    void SetValue(const wxString& value);
    void SetNext(wxXmlAttribute* next);
};

%{

void
wxXmlAttribute::Destroy()
  CODE:
    delete THIS;

%}

%name{Wx::XmlNode} class wxXmlNode
{
    wxXmlNode(wxXmlNode* parent = NULL, wxXmlNodeType type = wxXmlNodeType(0),
              const wxString& name = wxEmptyString,
              const wxString& content = wxEmptyString,
              wxXmlAttribute* props = NULL, wxXmlNode* next = NULL);

    void AddChild(wxXmlNode* child);
    void InsertChild(wxXmlNode *child, wxXmlNode *before_node);
    bool RemoveChild(wxXmlNode *child);
    void AddAttribute(const wxString& name, const wxString& value);
    bool DeleteAttribute(const wxString& name);

    wxXmlNodeType GetType() const;
    wxString GetName() const;
    wxString GetContent() const;

    wxXmlNode *GetParent() const;
    wxXmlNode *GetNext() const;
    wxXmlNode *GetChildren() const;

    wxXmlAttribute *GetAttributes() const;
##    bool GetPropVal(const wxString& propName, wxString *value) const;
##    wxString GetPropVal(const wxString& propName,
##                        const wxString& defaultVal) const;
    bool HasAttribute(const wxString& propName) const;

    void SetType(wxXmlNodeType type);
    void SetName(const wxString& name);
    void SetContent(const wxString& con);

    void SetParent(wxXmlNode *parent);
    void SetNext(wxXmlNode *next);
    void SetChildren(wxXmlNode *child);

    void SetAttributes(wxXmlAttribute *prop);
##    void AddProperty(wxXmlProperty *prop);
};

%{

void
wxXmlNode::Destroy()
  CODE:
    delete THIS;

SV*
wxXmlNode::GetAttribute(name, value = &PL_sv_undef)
    wxString name
    SV* value
  CODE:
    wxString tmp;
    bool ok = THIS->GetAttribute(name, &tmp);
    if( ok )
        RETVAL = wxPli_wxString_2_sv( aTHX_ tmp, NEWSV(0, 0) );
    else
        RETVAL = SvREFCNT_inc( value );
  OUTPUT: RETVAL

%}
